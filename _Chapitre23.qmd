# Fonctions `SAS` et `R` utiles

## Mesurer la durée d'exécution d'un programme
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
%let temps_debut = %sysfunc(datetime());

proc sort data = donnees_sas;by identifiant date_entree;run;

%let temps_fin = %sysfunc(datetime());
%let duree = %sysevalf((&temps_fin. - &temps_debut.) / 60);
%put Durée exécution : &duree minutes;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
system.time(donnees_rbase <- donnees_rbase[order(donnees_rbase$identifiant, donnees_rbase$date_entree, na.last = FALSE), ])

# Autre possibilité
debut <- Sys.time()
donnees_rbase <- donnees_rbase[order(donnees_rbase$identifiant, donnees_rbase$date_entree, na.last = FALSE), ]
fin <- Sys.time()
sprintf("Temps d'exécution : %s secondes !", fin - debut)
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
system.time(donnees_tidyverse <- donnees_tidyverse %>% 
              arrange(identifiant, date_entree))

# Autre possibilité
debut <- Sys.time()
donnees_tidyverse <- donnees_tidyverse %>% 
              arrange(identifiant, date_entree)
fin <- Sys.time()
sprintf("Temps d'exécution : %s secondes !", fin - debut)
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
system.time(setorder(donnees_datatable, "identifiant", "date_entree", na.last = FALSE))

# Autres possibilités
debut <- Sys.time()
setorder(donnees_datatable, "identifiant", "date_entree", na.last = FALSE)
fin <- Sys.time()
sprintf("Temps d'exécution : %s secondes !", fin - debut)

started.at <- proc.time()
setorder(donnees_datatable, "identifiant", "date_entree", na.last = FALSE)
timetaken(started.at)
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Exécuter le code d'un autre fichier
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
/* include("chemin") */
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# encoding permet de gérer l'encodage des caractères accentués
# echo affiche le script dans la console
# max.deparse.length permet de s'assurer qu'un texte long est bien visible

# source("chemin", encoding = "utf-8", echo = TRUE, max.deparse.length = 1e3)
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# encoding permet de gérer l'encodage des caractères accentués
# echo affiche le script dans la console
# max.deparse.length permet de s'assurer qu'un texte long est bien visible

# source("chemin", encoding = "utf-8", echo = TRUE, max.deparse.length = 1e3)
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# encoding permet de gérer l'encodage des caractères accentués
# echo affiche le script dans la console
# max.deparse.length permet de s'assurer qu'un texte long est bien visible

# source("chemin", encoding = "utf-8", echo = TRUE, max.deparse.length = 1e3)
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Nombre de lignes affectées par un changement

::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
/* Ne semble pas exister nativement */
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Ne semble pas exister nativement
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Ne semble pas exister nativement
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
donnees_datatable[, sexef2 := tolower(sexef)]
sprintf("Nombre de lignes modifiées : %d", .Last.updated)
donnees_datatable[, sexef2 := NULL]

```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::
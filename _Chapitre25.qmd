# Créer ses propres fonctions (À FAIRE)

Pour en savoir plus sur l'écriture de fonctions en `tidyverse` :
<https://brad-cannell.github.io/r_notes/tidy-evaluation.html>.

## Sélection de données
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
%macro Selection (BaseInitiale, BaseFinale, condition);
  data &BaseFinale.;
    set &BaseInitiale. (&condition.);
  run;
%mend Selection;
%Selection();
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}

```

## tidyverse {.unnumbered .unlisted}

```{r, warning=FALSE, message=FALSE, results='hide'}

```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}

```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Fonction calculant un indicateur statistique
::: {.panel-tabset group="language"}

Cet exemple de fonction propose de calculer un indicateur statistique au choix (par exemple, moyenne, médiane, maximum, etc.) sur un certain nombre de variables numériques (au choix) d'une certaine base de données (au choix) avec éventuellement une sélection de lignes.

## SAS {.unnumbered .unlisted}
``` sas
%macro CalculMoyenne (baseDonnees, variables, statistique, condition);
  proc means data = &baseDonnees. &statistique.;
    var &variables.;
  run;
%mend CalculMoyenne;

%CalculMoyenne(baseDonnees = donnees_sas, variables = note_formateur note_contenu);
%CalculMoyenne(baseDonnees = donnees_sas, variables = note_formateur note_contenu, statistique = mean sum median);
%CalculMoyenne(baseDonnees = donnees_sas, variables = note_formateur note_contenu, statistique = mean sum, condition = where sexef = "Femme");
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
CalculMoyenne <- function(baseDonnees, variable, statistique = "mean", ..., selection = TRUE) {
  baseDonnees <- eval(substitute(subset(baseDonnees, selection)))
  moyenne <- lapply(baseDonnees[, variable], get(statistique), ...)
  names(moyenne) <- paste(names(moyenne), statistique, sep = "_")
  moyenne <- data.frame(moyenne)
  return(moyenne)
}

CalculMoyenne(donnees_rbase, c("note_formateur", "note_contenu"))
CalculMoyenne(donnees_rbase, c("note_formateur", "note_contenu"), statistique = "median", na.rm = TRUE)
CalculMoyenne(donnees_rbase, c("note_formateur", "note_contenu"), "mean", na.rm = TRUE, selection = sexef == "Femme")
CalculMoyenne(donnees_rbase, c("note_formateur", "note_contenu"), "quantile", na.rm = TRUE, probs = seq(0, 1, 0.1), selection = sexef == "Femme")
```

## tidyverse {.unnumbered .unlisted}

```{r, warning=FALSE, message=FALSE, results='hide'}
CalculMoyenne <- function(baseDonnees, variable, statistique = "mean", ..., selection = TRUE) {
  moyenne <- baseDonnees %>% 
    filter({{ selection }}) %>% 
    summarise(across(variable, ~ get(statistique)(.x, ...), .names = "{.col}_{ {{ statistique }} }"))
  return(moyenne)
}

CalculMoyenne(donnees_rbase, c("note_formateur", "note_contenu"))
CalculMoyenne(donnees_rbase, c("note_formateur", "note_contenu"), statistique = "median", na.rm = TRUE)
CalculMoyenne(donnees_rbase, c("note_formateur", "note_contenu"), "mean", na.rm = TRUE, selection = sexef == "Femme")
CalculMoyenne(donnees_rbase, c("note_formateur", "note_contenu"), "quantile", na.rm = TRUE, probs = seq(0, 1, 0.1), selection = sexef == "Femme")
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}

```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

Autres exemples de fonctions possibles : statistiques par groupes (proc tabulate), proc freq, ajout dans la base d'indicatrices de présence en stock à la fin du mois (%local).
---
title: "Trucs et astuces en `R`"
lang : fr
author:
  - Nassab ABDALLAH^[Dares/SCS, nassab.abdallah@travail.gouv.fr]
  - Damien EUZENAT^[Dares/DIP, damien.euzenat@travail.gouv.fr]
format:
  html:
    toc: true
    toc-expand: 2
    toc-location: left
    number-sections: true
    code-copy: true
    filters: 
      - fix_meta_notes.lua
# format : native    

editor: visual

# Summary for listings and search engines
description: |
  Trucs et astuces en `R`.

# Date published
date: "`r Sys.Date()`"
output:
  rmdformats::robobook:
    highlight: tango
    number_sections: true
  
categories:
  - R
---

::: justify
Voici quelques trucs et astuces utiles à connaître sur R, des livres [The R Inferno](https://www.burns-stat.com/pages/Tutor/R_inferno.pdf) et [Advanced R](https://adv-r.hadley.nz/), à consulter pour plus de détails.
:::

# Trucs et astuces en R

## Effets des calculs en virgule flottante

```{r, warning=FALSE, message=FALSE}
sqrt(2) ^ 2 == 2
1 / 49 * 49 == 1
.1 == .3 / 3
seq(0, 1, by=.1) == .3
unique(c(.3, .4 - .1, .5 - .2, .6 - .3, .7 - .4))
```

## Les types d'objet

```{r, warning=FALSE, message=FALSE}
# En savoir plus sur ses données
data("cars")
typeof(cars)
class(cars)
mode(cars)
str(cars)
dim(cars)
c(is.data.frame(cars), is.list(cars), is.vector(cars), is.array(cars))
```

Notation L

```{r, warning=FALSE, message=FALSE}
# Notation L : imposer à R de créer un nombre sous format "integer", pour des raisons d'efficacité
class(1)
class(1L)
```

## Les affectations

```{r, warning=FALSE, message=FALSE}
# Importance des espaces
x<-3
x
# S'agit-il de ?
x <- 3
x < -3

```

```{r, warning=FALSE, message=FALSE}
# Les {} permettent de réaliser une affectation (<-) au sein d'un traitement plus complexe !
# Exemple ici : sommer les positions paires multipliées par 2 et les positions impaires multipliées par 3
sum({x <- 1:6 ; x[1:length(x) %% 2 == 0] <- x[1:length(x) %% 2 == 0] * 2 ; x[1:length(x) %% 2 != 0] <- x[1:length(x) %% 2 != 0] * 3 ; x})

```

```{r, warning=FALSE, message=FALSE}
# Afficher ou non la valeur de l'objet affecté pendant l'affectation
x <- pi
(x <- pi)

```

```{r, warning=FALSE, message=FALSE, error=TRUE}
# Comparaisons multiples
x <- 0.5
# Correct
0 < x & x < 1
# Incorrect
0 < x < 1

```

```{r, warning=FALSE, message=FALSE}
# Ne pas confondre !
seq(0:10)
0:10
seq(0, 10)

```

```{r, warning=FALSE, message=FALSE}
# Privilégier seq_len à : lorsqu'il y a un risque de 0
# Fonctionnement identique
n <- 5
1:n
seq_len(n)
# Problème avec les 0
n <- 0
1:n
seq_len(n)

```

```{r, warning=FALSE, message=FALSE}
# Préférer seq_along à : au cas où la taille de l'objet est 0
x <- c() ;length(x)
for(i in 1:length(x)) print(i)
for(i in seq_along(x)) print(i)
for(i in seq(along=x)) print(i)

```

```{r, warning=FALSE, message=FALSE}
# Equivalent des list-comprehensions de type Python en R
# Somme des entiers de 1 à 1 000 multiples de 3 ou 5, en une ligne !
# 4 manières de faire
sum({l <- 1:1000 ; l[l %% 3 == 0 | l %% 5 == 0]})
sum({l <- 1:1000 ; l[seq_along(l) %% 3 == 0 | seq_along(l) %% 5 == 0]})
sum(l<-(1:1000)[l %% 3 == 0 | l %% 5 == 0])
sum((1:1000)[(1:1000 %% 3) == 0 | (1:1000 %% 5) == 0])

```

```{r, warning=FALSE, message=FALSE}
# Opérations mathématiques
# Infini
1/0
# Nan = not a number
0/0
log(-1)

```

## Principe de vectorisation

La fonction s'applique à tous les éléments du vecteur !!

```{r, warning=FALSE, message=FALSE}
# Exemple de vecteur
valeurs <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
valeurs <- 1:10

```

```{r, warning=FALSE, message=FALSE}
# Valeurs au carré
valeurs ** 2

```

```{r, warning=FALSE, message=FALSE}
# logarithme des valeurs
log(valeurs)

```

```{r, warning=FALSE, message=FALSE}
# Maximum des valeurs
max(valeurs)

```

```{r, warning=FALSE, message=FALSE}
# Limite des valeurs
range(valeurs)

```

```{r, warning=FALSE, message=FALSE}
# Correct
mean(valeurs)

```

```{r, warning=FALSE, message=FALSE}
# Correct
mean(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))

```

```{r, warning=FALSE, message=FALSE}
# Inattendu
mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

```

```{r, warning=FALSE, message=FALSE}
# Attention aux parenthèses !
n <- 10
# Inattendu ! Correspond à (1-1, 2-1, 3-1, ..., 10-1)
1:n-1
# Correct
1:(n-1)

```

```{r, warning=FALSE, message=FALSE}
# Minimum ou maximum élément par élément
x1 <- c(1, 2, 5, 6, 8)
x2 <- c(4, 0, 7, 2, 1)
# Minimum : 2 possibilités
pmin(x1, x2)
mapply(min, x1, x2)
# Maximum : 2 possibilités
pmax(x1, x2)
mapply(max, x1, x2)

```

```{r, warning=FALSE, message=FALSE}
# Calculer (x - min) / (max - min) pour chaque élément x d'un vecteur
x <- c(1,2,3)
sapply(x, function(xi, mn, mx) {(xi - mn) / (mx - mn)}, mn = min(x), mx = max(x))

```

## Principe de coercion

Dans les comparaisons, les objets R sont successivement convertis en logical, integer, numeric, complex et character, jusqu'à ce que la comparaison puisse se faire.

```{r, warning=FALSE, message=FALSE}
# TRUE / FALSE est transformé en integer (1 / 0)
TRUE == 1
TRUE == 2
FALSE == 0

```

```{r, warning=FALSE, message=FALSE}
# TRUE est convertit en character
TRUE == "1"

```

```{r, warning=FALSE, message=FALSE}
# 5 est convertit en character
5 < '7'

```

```{r, warning=FALSE, message=FALSE}
# 50 est convertit en character
50 < '7'

```


## Principe de recycling

```{r}
# Fonctionne sans soulever de message d'erreur
x <- c(1, 2, 3)
y <- c(1, 2, 3, 4, 5, 6)
x + y
```

```{r}
# Fonctionne, mais Warning
x <- c(1, 2, 3)
y <- c(1, 2, 3, 4, 5, 6, 7)
x + y
```


## Opérateurs de contrôle

```{r, warning=FALSE, message=FALSE}
# Conditions if / else
x <- 1

```

```{r, warning=FALSE, message=FALSE}
# Correct
if (identical(x, 1)) {
print("x est égal à 1")
} else {
print("x est différent de 1")
}

```

```{r, warning=FALSE, message=FALSE}
# Correct
if (identical(x, 1)) {print("x est égal à 1")
} else {print("x est différent de 1")}

```

```{r, warning=FALSE, message=FALSE}
# Correct
if (identical(x, 1)) print("x est égal à 1") else
print("x est différent de 1")

```

```{r, warning=FALSE, message=FALSE}
# Correct
if (identical(x, 1)) print("x est égal à 1") else print("x est différent de 1")

```

```{r, warning=FALSE, message=FALSE, error=TRUE}
# Incorrect
if (identical(x, 1)) print("x est égal à 1")
else print("x est différent de 1")

```

```{r, warning=FALSE, message=FALSE}
# Switch
# Fonctions et conditions if / else
condition <- function(langue = "Français") {
if (langue == "Français") {
"salut"
} else if (langue == "Anglais") {
"hello"
} else if (langue == "Russe") {
"привет"
} else {
stop("salut")
}
}
condition("Anglais")

```

```{r, warning=FALSE, message=FALSE}
# Autre possibilité avec switch, mais à réserver aux variables caractères !
condition <- function(langue = "Français") {
switch(langue,
Français = "salut",
Anglais = "hello",
Russe = "привет",
stop("salut")
)
}
condition("Français")

```

```{r, warning=FALSE, message=FALSE}
# Penser au print
for(i in 1:5) i
for(i in 1:5) print(i)

```

```{r, warning=FALSE, message=FALSE}
# Différences print et cat
cat("Salut !\nComment vas-tu ?")
print("Salut !\nComment vas-tu ?")

```

## Les valeurs manquantes

```{r, warning=FALSE, message=FALSE}
# Transformer les valeurs manquantes en 0
x <- data.frame(X1 = c(1, NA, 2), X2 = c(NA, NA, 3))
x
x[is.na(x)] <- 0
x
```

```{r, warning=FALSE, message=FALSE}
# Pour les valeurs manquantes, toujours utiliser is.na et non ==
NA == c(3, 1, 3, NA)
is.na(c(3, 1, 3, NA))

```

```{r, warning=FALSE, message=FALSE}
# Utiliser %in% et non == pour vérifier une appartenance à plusieurs variables
x1 <- 1:6
x1 == c(1, 5)
x1 %in% c(1, 5)

```

```{r, warning=FALSE, message=FALSE}
# Sélection de données en cas de valeurs manquantes
xna <- c(1, NA, 3, 2, 4, 2)

```

```{r, warning=FALSE, message=FALSE}
# Avec ce code, les NA sont conservés
xna[xna == 2]

```

```{r, warning=FALSE, message=FALSE}
# Code sans les NA
xna[!is.na(xna) & xna == 2]

```

```{r, warning=FALSE, message=FALSE}
# Code compact sans les NA
xna[which(xna == 2)]

```

```{r, warning=FALSE, message=FALSE}
# Incidence des NA dans le calcul de statistiques !
# Besoin de l'instruction na.rm = TRUE pour en supprimer l'incidence
x <- c(1, 5, 6, NA, 8)
mean(x)
mean(x, na.rm = TRUE)
max(x)
max(x, na.rm = TRUE)
```

## Sélection d'éléments

```{r, warning=FALSE, message=FALSE}
# Le 1er élément est numéroté 1 et non 0 comme dans Python
x <- 1:3
x[c(0, 4)] <- c(-1, 9)
# Marche !!
for(i in 0:3) print(x[i])

```

```{r, warning=FALSE, message=FALSE}
# Cas où les noms ne sont pas uniques
x <- c(a = 1, b = 2, a = 3)
x["a"]
x[names(x) %in% "a"]

```

```{r, warning=FALSE, message=FALSE}
# Options drop = FALSE
x <- data.frame(X1 = c(1,2), X2 = c(3,4), x3 = c(5,6))
is.data.frame(x[, c(1,2)])
is.data.frame(x[, c(1)])
is.data.frame(x[, c(1), drop = FALSE])

```

```{r, warning=FALSE, message=FALSE}
# Fonction subset
x <- data.frame(x1 = c(1,2), x2 = c(3,4), x3 = c(5,6))
subset(x, select = x1)
subset(x, select = -x1)

```

```{r, warning=FALSE, message=FALSE}
# Correct
subset(x, x1 == 1)

```

```{r, warning=FALSE, message=FALSE}
# Incorrect
subset(x, x1 = 1)

```

```{r, warning=FALSE, message=FALSE, error=TRUE}
# Référence à des noms de colonne non usuels
df <- data.frame(x = rnorm(5), y = runif(5))
names(df) <- 1:2
# Incorrect
df$1
# Correct
df$`1`

```

```{r, warning=FALSE, message=FALSE}
# Utilisation de assign pour assigner une valeur à un objet en le désignant sous forme caractère
assign('objet', 3:5)
objet
for(i in 1:5) assign(paste('objet', i, sep = '_'), i)
objet_5

```

## Les listes

```{r, warning=FALSE, message=FALSE}
# Ajouter un élément à une liste
liste <- list(1, 2)
liste
liste <- c(liste, list(3))
liste

```

```{r, warning=FALSE, message=FALSE}
# Trier une liste
liste <- list("2" = 2, "0" = 0, "1" = 1)
liste
liste[order(names(liste))]

```

```{r, warning=FALSE, message=FALSE}
# Extraction de listes
liste <- list(nombres = 1:5, lettres = letters[1:5])
liste$nombres

```

```{r, warning=FALSE, message=FALSE}
# On veut faire appel à un élement de la liste à partir d'une variable extérieure
var <- "nombres"

```

```{r, warning=FALSE, message=FALSE}
# Ne marche pas, car nombres est en caractère
liste$var

```

```{r, warning=FALSE, message=FALSE}
# Fonctionne
liste[[var]]

```

```{r, warning=FALSE, message=FALSE}
# Sélection dans une liste
liste <- list(nombres = 1:5, lettres = letters[1:5])
liste["nombres"]
is.list(liste["nombres"])
liste[["nombres"]]
is.list(liste[["nombres"]])

```

```{r, warning=FALSE, message=FALSE}
# Suppression des éléments d'une liste
liste <- list(nombres = 1:5, lettres = letters[1:5])
liste[-1]
liste["nombres"] <- NULL
liste

```

## Informations sur R

```{r, warning=FALSE, message=FALSE, results='hide'}
# Informations sur la session de R
sessionInfo()
Sys.info()
.Platform

# Version de R
R.version.string

# Lien vers le bureau de l'utilisateur
file.path(path.expand('~'), "Desktop")

# Chemin de l'exécutable R est-il installé ?
R.home("bin")

# Où sont installés les packages R
.libPaths()
```

## Trucs et astuces divers

```{r, warning=FALSE, message=FALSE}
# Créer un objet sous forme de code R !
data("cars")
dput(cars)

```

```{r, warning=FALSE, message=FALSE}
# Outils de debuggage
options(error = recover)
options(error=NULL)

```

```{r, warning=FALSE, message=FALSE}
# Définir ses propres opérateurs
# R reconnait le texte entre %% comme un opérateur binaire
# Exemple, simplifier la fonction paste
'%+%' <- function(x, y) { paste(x, y, sep = "") }
"Groupe_" %+% 0:9

```



# Mise en garde

## Comment utiliser cet aide-mémoire ?

Sont présentés dans cet aide-mémoire des programmes statistiques courants pour la gestion de données statistiques, traduits dans les langages SAS et R (environnements R-Base, Tidyverse et data.table). Ces tâches sont standards dans l'analyse statistique et réalisables en un petit nombre d'instructions.

Cet aide-mémoire vise à faciliter la traduction des programmes statistiques entre ces différents langages (de SAS vers R, et d'un environnement R à un autre), et leur appropriation.

Il est présenté sous forme de tâches élémentaires statistiques (sélection de lignes ou de colonnes d'une base de données, repérage des doublons, etc.).

Trois grands environnements R sont traités : R-Base, Tidyverse et data.table. Ils ne doivent pas être vus comme des concurrents, mais comme des compléments :

-   certaines tâches peuvent être plus ou moins facilement réalisés avec l'un ou l'autre ;
-   ils présentent chacun des avantages et des inconvénients ;
-   ils laissent le choix de la stratégie de codage.

Ce guide est destiné à vous permettre de jongler plus facilement entre les environnements.

Plusieurs solutions pour réaliser la même tâche sont proposées dans ce guide :

-   certaines solutions peuvent être plus concises, mais moins claires ;
-   d'autres plus ou moins rapides en fonction des données et des matériels et logiciels utilisés ;
-   certaines façons de procéder sont plus efficaces que d'autres en R, mais cela peut dépendre des données et du matériel utilisé.

L'attention du lecteur est attirée sur le fait que :

1)  ce guide n'est pas exhaustf. Ainsi, les environnements peuvent proposer des solutions *ad-hoc* simplifiant grandement la résolution de problèmes moins courants et qui ne sont pas présents dans les autres environnements (ex. des *rolling joins* de data.table) ;

2)  ce guide ne traite pas de ces stratégies, et le lecteur est invité à se documenter sur les environnements pour en savoir plus ;

3)  l'exercice de traduction de SAS vers R peut s'apparenter à la traduction d'un texte en langue étrangère. De même qu'une traduction littérale d'un texte en peut parfois être de mauvaise qualité, la traduction littérale d'une masse de codes SAS en codes R au moyen de cet aide-mémoire peut produire des résultats décevants. En effet, toute bonne traduction nécessite au moins *a minima* d'adapter le code SAS à une "nouvelle langue", celle de R. La partie sur les spécificités de SAS par rapport à R peut vous aider sur ce point.

## Spécificités de SAS par rapport à R

Voici une liste non-exhaustive de spécificités de SAS par rapport à R à connaître.

R est sensible à la casse, ce qui n'est pas le cas de SAS. Un même nom de variable en majuscule et en minuscule désigne deux variables différentes en R, une seule en SAS.

R est un logiciel libre (ce qui implique notamment qu'il est gratuit, librement reproductible, modifiable et diffusable, et son code source est ouvert). En revanche, SAS est un logiciel propriétaire.

SAS est un langage centralisé, R un langage décentralisé.

De par son statut de logiciel libre, de multiples extensions existent (packages). L'usage des packages :

-   peut être un atout, car les packages permettent de réaliser plus facilement des choses complexes ;
-   peut aussi être source de problèmes, d'abord de maintenance du fait des dépendances (une mise-à-jour peut casser les dépendances), ensuite du fait que des packages peuvent disparaître ou ne plus être maintenus au cours du temps, engendrant des coûts de maintenance de code ;
-   peut engendrer des problèmes de rétrocompatibilité (un code écrit dans le passé ne fonctionne plus suite à une mise-à-jour) : il convient d'être conscient de ces considérations avant d'utiliser aveuglément des packages.

R propose plusieurs façons de procéder (différents environnements, différents packages, etc.), tandis que SAS tend à ne proposer qu'une ou deux solutions.

R est le langage / logiciel, à ne pas confondre avec RStudio, qui est uniquement un IDE (Integrated Development Environment, interface graphique), parmi d'autres. Une telle distinction n'a pas lieu pour SAS.

La gestion de la mémoire est différente entre les logiciels. R importe l'ensemble des données en mémoire vive, SAS en copie une partie sur le disque dur. Ceci a plusieurs implications pour le travail statistique :

-   si le volume des données excède la mémoire vive, il n'est pas possible de les traiter nativement en R. Il faut alors utiliser des stratégies alternatives ;
-   il faut être parcimonieux sur le nombre de colonnes à inclure dans les bases de données en R. Par exemple, il vaut mieux recréer dans le programme les variables explicatives faciles à obtenir plutôt que les inclure dans la base de données, où elles occupent de la place et accaparent de la mémoire vive.

Quelles solutions adopter dans le cas où les données à mpanipuler ne tiennent pas en mémoire vive de l'ordinateur ?

-   chercher à réduire la taille de la base de données en supprimant des colonnes inutiles ;
-   chercher à modifier le processus de production pour le rendre moins gourmand en mémoire ;
-   augmenter la mémoire vive de son ordinateur ;
-   utiliser les packages Arrow et DuckDb qui peuvent gérer des données excédant la mémoire vive.

R a plusieurs spécificités à connaître par rapport à SAS : COMPLETER

-   vectorisation plutôt que boucle (ex.)
-   recycling
-   fonctions plutôt que macro
-   gestion de la mémoire spécifique : shallow / deep copy, créer une colonne / une ligne pour l'exemple / Exemple de boucle inefficace / certaines façons sont +/- efficaces

## Avantages et inconvénients des environnements R

### R Base

#### Avantages :

-   absence de dépendance (ne s'appuie sur aucun package) : pas besoin d'installer un package, de gérer sa mise à jour, de craindre pour sa disparition
-   garantit la rétrocompatibilité du code : utile dans des environnements de production
-   dans certains cas, se révèle la solution la plus simple
-   parfois, la seule façon de faire

#### Inconvénients :

-   ne permet pas de gérer des bases de données plus volumineuses que la mémoire vive
-   syntaxe plus complexe et parfois incohérente
-   souvent moins rapide que les autres environnements
-   demande plus de connaissance sur le fonctionnement du langage R
-   certaines tâches sont plus simples à traiter avec les autres environnements

### Tidyverse

#### Avantages :

-   plus simple à prendre en main
-   syntaxe plus simple que les autres environnements et cohérente
-   largement utilisé dans la communauté R
-   tend à s'imposer comme la référence de la gestion de données sur R
-   syntaxe utilisée également dans les packages Arrow / DuckDb

#### Inconvénients :

-   ne permet pas de gérer des bases de données plus volumineuses que la mémoire vive
-   forte dépendance : la rétrocompatibilité n'est pas assurée, potentiel problème dans un environnement de production
-   globalement moins rapide que data.table
-   tâches non prévues plus difficiles à réaliser
-   certaines tâches sont plus simples à traiter avec les autres environnements

### data.table

#### Avantages :

-   faible dépendance : garantit une rétrocompatibilité élevée
-   syntaxe proche du R Base
-   plus rapide et puissant que ses concurrents

#### Inconvénients :

-   ne permet pas de gérer des bases de données plus volumineuses que la mémoire vive
-   syntaxe parfois déroutante, incohérente, et peu explicite
-   moins utilisé
-   certaines tâches sont plus simples à traiter avec les autres environnements
# Sélection de lignes

## Sélectionner des lignes

### 3e ligne

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
data Ligne3;set donnees_sas (firstobs = 3 obs = 3);run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
ligne3 <- donnees_rbase[3, ]
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
ligne3 <- donnees_tidyverse %>% slice(3)
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
ligne3 <- donnees_datatable[3, ]
ligne3 <- donnees_datatable[3]
```

### arrow/duckdb {.unnumbered .unlisted}

DuckDB, moteur SQL, ne respecte pas l'ordre des lignes. Il faut passer par un filtre ou choisir explicitement un ordre.

```{r, warning=FALSE, message=FALSE}
requete_duckdb %>% filter(lubridate::year(date_entree) == 2023)
```

:::

### 3 premières lignes et 3 premières colonnes

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
proc contents data = donnees_sas out = Var noprint;run;
proc sql noprint;
  select name into :nom_col separated by " "
  from Var
  where 1 <= varnum <= 3;
run;
data Top3;
  set donnees_sas (firstobs = 1 obs = 3 keep = &nom_col.);
run;
proc datasets lib = Work nolist;delete Var;run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
top3 <- donnees_rbase[1:3, 1:3]
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
top3 <- donnees_tidyverse %>% slice(1:3) %>% select(1:3)
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
top3 <- donnees_datatable[1:3, 1:3]
```

### arrow/duckdb {.unnumbered .unlisted}

DuckDB, moteur SQL, ne respecte pas l'ordre des lignes. Il faut passer par un filtre ou choisir explicitement un ordre.

```{r, warning=FALSE, message=FALSE}
requete_duckdb %>% filter(lubridate::year(date_entree) == 2023)
```

:::

### Entrées en 2023

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
data En2023;
  set donnees_sas (where = (year(date_entree) = 2023));
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# ATTENTION, solution qui ne fonctionne pas toujours bien ! En effet, les valeurs manquantes sont sélectionnées !
en2023 <- donnees_rbase[lubridate::year(donnees_rbase$date_entree) == 2023, ]

# Bonnes écritures, qui excluent les valeurs manquantes
en2023 <- donnees_rbase[lubridate::year(donnees_rbase$date_entree) %in% c(2023), ]
en2023 <- donnees_rbase[which(lubridate::year(donnees_rbase$date_entree) == 2023), ]
en2023 <- subset(donnees_rbase, lubridate::year(donnees_rbase$date_entree) == 2023)
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
en2023 <- donnees_tidyverse %>% filter(lubridate::year(date_entree) == 2023)
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Pas de problème avec les valeurs manquantes comme pour la syntaxe en R-Base
# Une fonction year() est déjà implémentée en data.table, l'usage de lubridate est inutile
en2023 <- donnees_datatable[data.table::year(date_entree) == 2023, ]
en2023 <- donnees_datatable[data.table::year(date_entree) == 2023]
en2023 <- subset(donnees_datatable, data.table::year(date_entree) == 2023)
```

### arrow/duckdb {.unnumbered .unlisted}

DuckDB, moteur SQL, ne respecte pas l'ordre des lignes. Il faut passer par un filtre ou choisir explicitement un ordre.

```{r, warning=FALSE, message=FALSE}
requete_duckdb %>% filter(lubridate::year(date_entree) == 2023)
```

:::

### Entrées entre 2021 et 2023

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
data Entre2021_2023;
  set donnees_sas (where = (2021 <= year(date_entree) <= 2023));
run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
entre2021_2023 <- donnees_rbase[lubridate::year(donnees_rbase$date_entree) %in% 2021:2023, ]
entre2021_2023 <- donnees_rbase[lubridate::year(donnees_rbase$date_entree) >= 2021 & lubridate::year(donnees_rbase$date_entree) <= 2023, ]
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
entre2021_2023 <- donnees_tidyverse %>% filter(between(lubridate::year(date_entree), 2021, 2023))
entre2021_2023 <- donnees_tidyverse %>% filter(lubridate::year(date_entree) %in% 2021:2023)
entre2021_2023 <- donnees_tidyverse %>% filter(lubridate::year(date_entree) >= 2021, lubridate::year(date_entree) <= 2023)
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Une fonction year() est déjà implémentée en data.table, l'usage de lubridate est inutile
entre2021_2023 <- donnees_datatable[data.table::year(date_entree) %in% 2021:2023]
entre2021_2023 <- donnees_datatable[between(data.table::year(date_entree), 2021, 2023)]
```

### arrow/duckdb {.unnumbered .unlisted}

:::

## Sélectionner des lignes suivant de multiples conditions
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
/* Femmes entrées avant 2023 */
/* Ecriture correcte */
data Avant2023_Femme;
  set donnees_sas (where = (year(date_entree) < 2023 and not missing(date_entree) and sexe = 2));
run;

/* Ecriture incorrecte. Les valeurs manquantes sont considérées comme des nombres négatifs faibles, et inférieurs à 2023. */
/* Elles sont sélectionnées dans le code suivant : */
data Avant2023_Femme;
  set donnees_sas (where = (year(date_entree) < 2023 and sexe = 2));
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Femmes entrées avant 2023
avant2023_femme <- subset(donnees_rbase, lubridate::year(date_entree) < 2023 & sexe == "2")
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Femmes entrées avant 2023
avant2023_femme <- donnees_tidyverse %>% 
  filter(lubridate::year(date_entree) < 2023 & sexe == "2")
avant2023_femme <- donnees_tidyverse %>% 
  filter(lubridate::year(date_entree) < 2023, sexe == "2")
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Femmes entrées avant 2023
# Une fonction year() est déjà implémentée en data.table, l'usage de lubridate est inutile
avant2023_femme <- donnees_datatable[data.table::year(date_entree) < 2023 & sexe == "2"]
avant2023_femme <- subset(donnees_datatable, data.table::year(date_entree) < 2023 & sexe == "2")
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}
# Femmes entrées avant 2023
requete_duckdb %>% 
  filter(lubridate::year(date_entree) < 2023 & sexe == "2")
```
:::

## Sélectionner des lignes par référence : lignes de l'identifiant "087"
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
%let var = identifiant;
%let sel = 087;

data Selection;
  set donnees_sas;
  if &var. in ("&sel.");
run;

/* Autre solution */
data Selection;
  set donnees_sas (where = (&var. in ("&sel.")));
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
variable <- "identifiant"
sel <- "087"
donnees_rbase[donnees_rbase[, variable] %in% sel, ]
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
donnees_tidyverse %>% filter(identifiant %in% c("087")) %>% select(identifiant)
donnees_tidyverse %>% filter(identifiant == "087") %>% select(identifiant)

# Essayons désormais par variable
variable <- "identifiant"
sel <- "087"
donnees_tidyverse %>% filter(if_any(variable, ~ .x %in% sel)) %>% select(all_of(variable))
donnees_tidyverse %>% filter(get(variable) %in% sel) %>% select(all_of(variable))
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
variable <- "identifiant"
sel <- "087"
donnees_datatable[donnees_datatable[[variable]] %chin% sel, ]
donnees_datatable[get(variable) %chin% sel, ]
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}
requete_duckdb %>% filter(identifiant %in% c("087")) %>% select(identifiant)
requete_duckdb %>% filter(identifiant == "087") %>% select(identifiant)

# Essayons désormais par variables
variable <- "identifiant"
sel <- "087"
# À FAIRE : peut-on faire plus simplement ?
requete_duckdb %>% filter(.data[[variable]] %in% sel) %>% select(all_of(variable))
```
:::

## Sélectionner des lignes et des colonnes
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
%let cols = identifiant note_contenu sexe;
data Femmes;
  set donnees_sas (where = (Sexe = 2) keep = &cols.);
run;

/* Autre solution */
data Femmes;
  set donnees_sas;
  if Sexe = 2;
  keep &cols.;
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
cols <- c("identifiant", "note_contenu", "sexe", "date_naissance")
femmes <- donnees_rbase[donnees_rbase$sexe %in% c("2"), cols]
femmes <- subset(donnees_rbase, sexe %in% c("2"), cols)
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
cols <- c("identifiant", "note_contenu", "sexe", "date_naissance")
femmes <- donnees_tidyverse %>% filter(sexe == "2") %>% select(all_of(cols))
femmes <- donnees_tidyverse %>% filter(sexe == "2") %>% select({{ cols }})
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
cols <- c("identifiant", "note_contenu", "sexe", "date_naissance")
femmes <- donnees_datatable[sexe == "2", ..cols]
femmes <- subset(donnees_datatable, sexe %in% c("2"), cols)
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}
cols <- c("identifiant", "note_contenu", "sexe", "date_naissance")
requete_duckdb %>% filter(sexe == "2") %>% select(all_of(cols))
requete_duckdb %>% filter(sexe == "2") %>% select({{ cols }})
```

:::

## Sélectionner des lignes selon une condition externe

On souhaite sélectionner des colonnes selon une condition, mais cette condition est située à l'extérieur des opérateurs de manipulation des données.

::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
%let condition = sexe = 2;
data Femmes;
  set donnees_sas (where = (&condition.));
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
condition <- substitute(sexe == "2")
femmes <- subset(donnees_rbase, eval(condition))
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
condition <- expr(sexe == "2")
femmes <- donnees_tidyverse %>% 
  filter(!!condition)
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
condition <- quote(sexe == "2")
femmes <- donnees_datatable[condition, , env = list(condition = condition)]
femmes <- donnees_datatable[eval(condition)]
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::
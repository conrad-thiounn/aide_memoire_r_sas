# Préambule 



## Chemin du bureau de l'utilisateur 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
/* On vide la log */
dm "log; clear; ";
/* On récupère déjà l'identifiant de l'utilisateur (systèmes Windows) */
%let user = &sysuserid;
/* Chemin proprement dit */
%let bureau = C:\Users\&user.\Desktop;
libname bur "&bureau.";
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# On récupère déjà l'identifiant de l'utilisateur
user <- Sys.getenv("USERNAME")
chemin <- file.path("C:/Users", user, "Desktop")
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# On récupère déjà l'identifiant de l'utilisateur
user <- Sys.getenv("USERNAME")
chemin <- file.path("C:/Users", user, "Desktop")
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# On récupère déjà l'identifiant de l'utilisateur
user <- Sys.getenv("USERNAME")
chemin <- file.path("C:/Users", user, "Desktop")
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}
# On récupère déjà l'identifiant de l'utilisateur
user <- Sys.getenv("USERNAME")
chemin <- file.path("C:/Users", user, "Desktop")
```

:::

## Affichage de l'année 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
/* Année courante */
%let an = %sysfunc(year(%sysfunc(today())));
/* & (esperluette) indique à SAS qu'il doit remplacer an par sa valeur définie par le %let */
%put Année : &an.;
/* Autre possibilité */
data _null_;call symput('annee', strip(year(today())));run;
%put Année (autre méthode) : &annee.;
/* Année passée */
%put Année passée : %eval(&an. - 1);
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Année courante
annee <- lubridate::year(Sys.Date())
sprintf("Année : %04d", annee)
print(paste0("Année : ", annee))
# Année passée
annee_1 <- annee - 1
paste0("Année passée: ", annee_1)
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Année courante
annee <- lubridate::year(Sys.Date())
sprintf("Année : %04d", annee)
print(paste0("Année : ", annee))
# Année passée
annee_1 <- annee - 1
paste0("Année passée: ", annee_1)
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Année courante
annee <- lubridate::year(Sys.Date())
sprintf("Année : %04d", annee)
print(paste0("Année : ", annee))
# Année passée
annee_1 <- annee - 1
paste0("Année passée: ", annee_1)
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Construction des instructions if / else 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
%macro Annee(an);
  %if &an. >= 2024 %then %put Nous sommes en 2024 ou après !;
  %else %put Nous sommes avant 2024 !;
%mend Annee;
%Annee(&an.);
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Construction incorrecte ! Le else doit être sur la même ligne que le {
#if (annee >= 2024) {
#  print("Nous sommes en 2024 ou après")
#}
#else {
#  print("Nous sommes en 2023 ou avant")
#}
## Construction correcte ! Le else doit être sur la même ligne que le {
if (annee >= 2024) {
  print("Nous sommes en 2024 ou après")
} else {
  print("Nous sommes avant 2024 !")
}
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Construction incorrecte ! Le else doit être sur la même ligne que le {
#if (annee >= 2024) {
#  print("Nous sommes en 2024 ou après")
#}
#else {
#  print("Nous sommes en 2024 ou avant")
#}
## Construction correcte ! Le else doit être sur la même ligne que le {
if (annee >= 2024) {
  print("Nous sommes en 2024 ou après")
} else {
  print("Nous sommes avant 2024 !")
}
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Construction incorrecte ! Le else doit être sur la même ligne que le {
#if (annee >= 2024) {
#  print("Nous sommes en 2024 ou après")
#}
#else {
#  print("Nous sommes avant 2024")
#}
## Construction correcte ! Le else doit être sur la même ligne que le {
if (annee >= 2024) {
  print("Nous sommes en 2024 ou après")
} else {
  print("Nous sommes avant 2024 !")
}
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Répertoire de travail 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
/* Afficher le répertoire de travail par défaut (la Work) */
%let chemin_work = %sysfunc(pathname(work));
%put &chemin_work.;
proc sql;
  select path from dictionary.libnames where libname = "WORK";
quit;
/* Définir le répertoire de travail, si besoin */
/* libname "nom du répertoire";
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Afficher le répertoire de travail
getwd()

# Définir le répertoire de travail, si besoin
#setwd(dir="nom du répertoire")
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Afficher le répertoire de travail
getwd()

# Définir le répertoire de travail, si besoin
#setwd(dir="nom du répertoire")
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Afficher le répertoire de travail
getwd()

# Définir le répertoire de travail, si besoin
#setwd(dir="nom du répertoire")
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Autres points à connaître 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
/* Mise en garde : certains codes SAS pourraient aussi avec profit être écrits en langage SAS IML (Interactive Matrix Language).
   Cet aide-mémoire n'ayant pas vocation à être un dictionnaire SAS, cette méthode d'écriture n'est pas proposée ici. */
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Le pipe peut aussi être utilisé avec R-Base et data.table
# Le pipe permet d'enchaîner des opérations sur une même base
1:10 |> sum()
# R-Base est réputé plus lent que ses concurrents, ce qui est souvent vrai.
# Mais certaines fonctions en R-Base être très rapides (rowsum, rowSums, tapply, etc.)
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# tidyverse promeut l'utilisation du pipe (%>%), qui permet d'enchaîner des opérations sur une même base modifiée successivement.
# 2 types de pipes existent, le pipe de magrittr (%>%) et le pipe de R-Base (|>, à partir de la version 4.1)
# Les fonctionnalités simples des deux opérateurs sont identiques, mais il existe des différences.
# Le tidyverse peut s'utiliser sans pipe, mais le pipe simplifie la gestion des programmes.
# Les autres environnements (R-Base, data.table) peuvent aussi se présenter avec le pipe
# Dans cet aide-mémoire, le pipe de magrittr (%>%) est privilégié.

# À FAIRE :
# - expliquer les différences entre le pipe de magrittr et de R-Base

# Documentation de tidyverse (dplyr et tidyr)
# vignette("dplyr")
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Principe de base de data.table
#dt[i, j, by]
# i : sélection de lignes (instructions )
# j : sélection et manipulation de colonnes
# by : groupements
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::


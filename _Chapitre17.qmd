# Concaténer et empiler des bases

## Concaténer deux bases de données

On va mettre côte à côte (juxtaposer) le numéro de la ligne et la base de données.

### Les deux bases concaténées ont le même nombre de lignes

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Numéro de la ligne */
proc sql noprint;select count(*) into :tot from donnees_sas;run;
data Ajout;do Num_ligne = 1 to &tot.;output;end;run;

/* Le merge sans by va juxtaposer côte à côte les bases */
data Concatener;merge Ajout donnees_sas;run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Numéro de la ligne
ajout <- data.frame(num_ligne = seq_len(nrow(donnees_rbase)))
# cbind si les deux bases comprennent le même nombre de lignes
concatener <- cbind(ajout, donnees_rbase)
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Numéro de la ligne
ajout <- tibble(num_ligne = seq_len(nrow(donnees_tidyverse)))
# bind_cols si les deux bases comprennent le même nombre de lignes
concatener <- donnees_tidyverse %>% bind_cols(ajout)
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Numéro de la ligne
ajout <- data.table(num_ligne = seq_len(nrow(donnees_datatable)))
# data.frame::cbind si les deux bases comprennent le même nombre de lignes
concatener <- data.frame::cbind(ajout, donnees_datatable)
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

### Les deux bases concaténées n'ont pas le même nombre de lignes

::: {.panel-tabset group="language"}

### SAS {.unnumbered .unlisted}
``` sas
/* Si l'une des bases comprend plus de ligne que l'autre, ajout d'une ligne de valeurs manquantes */
proc sql noprint;select count(*) + 1 into :tot from donnees_sas;run;
data Ajout;do Num_ligne = 1 to &tot.;output;end;run;
data Concatener;merge Ajout donnees_sas;run;
```

### R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Erreur si l'une des bases comprend plus de lignes que l'autre
ajout <- data.frame(num_ligne = seq_len(nrow(donnees_rbase) + 1))
# donnees_rbase_ajout <- cbind(ajout, donnees_rbase)

# Proposition de solution
cbind_alt <- function(liste) {
  # Nombre maximal de colonnes dans la liste de dataframes
  maxCol <- max(unlist(lapply(liste, nrow)))
  # Ajout d'une colonne de valeurs manquantes pour toutes les bases ayant moins de ligne que le maximum
  res <- lapply(liste, function(x) {
    for (i in seq_len(maxCol - nrow(x))) {
      x[nrow(x) + i, ] <- NA
    }
    return(x)
  })
  # On joint les résultats
  return(do.call(cbind, res))
}
concatener <- cbind_alt(list(ajout, donnees_rbase))
```

### tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Ne fonctionne si l'une des bases comprend plus de lignes que l'autre !
ajout <- tibble(num_ligne = seq_len(nrow(donnees_tidyverse) + 1))
#concatener <- donnees_tidyverse %>% bind_cols(ajout)

# cf. solution proposée dans R-Base
cbind_alt <- function(liste) {
  # Nombre maximal de colonnes dans la liste de dataframes
  maxCol <- max(unlist(lapply(liste, nrow)))
  # Ajout d'une colonne de valeurs manquantes pour toutes les bases ayant moins de ligne que le maximum
  res <- lapply(liste, function(x) {
    for (i in seq_len(maxCol - nrow(x))) {
      x[nrow(x) + i, ] <- NA
    }
    return(x)
  })
  # On joint les résultats
  return(bind_cols(res))
}
concatener <- cbind_alt(list(ajout, donnees_tidyverse))
```

### data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# data.table::cbind fonctionne aussi avec des bases comportant un nombre différent de lignes
# Mais attention, le résultat n'est pas le même que sur SAS, il y a recycling
ajout <- data.table(num_ligne = seq_len(nrow(donnees_datatable) + 1))
concatener <- data.table::cbind(ajout, donnees_datatable)
```

### arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Empiler deux bases de données

On va empiler la moyenne des notes en dessous de la base des notes.

::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
/* On sélectionne un nombre réduit de variables pour simplifier l'exemple */
%let notes = Note_Contenu Note_Formateur Note_Moyens Note_Accompagnement Note_Materiel;
data Notes;set donnees_sas (keep = identifiant &notes.);run;
/* Moyenne des notes */
proc means data = Notes noprint mean;var &notes.;output out = Ajout mean = &notes.;run;

/* On concatène avec les données. Valeur manquante si les variables ne correspondent pas */

/* L'instruction set permet de concaténer les bases */
data Empiler;set Notes Ajout (drop = _type_ _freq_);run;

/* Autre solution, proc append */
data Empiler;set Notes;run;
proc append base = Empiler data = Ajout force;run;
/* On renomme la ligne des moyennes ajoutée */
data Empiler;
  set Empiler nobs = nobs;
  if _N_ = nobs then Identifiant = "Moyenne";
run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# On va empiler la somme des notes en dessous de la base des notes
varNotes <- c("note_contenu", "note_formateur", "note_moyens", "note_accompagnement", "note_materiel")
# Moyenne des notes
moyennes <- data.frame(t(colMeans(donnees_rbase[, varNotes], na.rm = TRUE)))
# On crée la base des notes
notes <- donnees_rbase[, varNotes]
# rbind lorsque les bases empilées ont le même nombre de colonne
empiler <- rbind(notes, moyennes)

# Mais, ne fonctionne plus si l'on concatène des bases de taille différente
notes <- donnees_rbase[, c("identifiant", varNotes)]
# Ne fonctionne pas
#empiler <- rbind(notes, moyennes)

# Une solution alternative, lorsque le nombre de colonnes diffère entre les deux bases
# Lorsque les variables ne correspondent pas, on les crée avec des valeurs manquantes, via setdiff
rbind_alt <- function(x, y) {
  rbind(data.frame(c(x, sapply(setdiff(names(y), names(x)), function(z) NA))),
        data.frame(c(y, sapply(setdiff(names(x), names(y)), function(z) NA)))
  )
  }
empiler <- rbind_alt(notes, moyennes)
# On renomme la ligne des moyennes ajoutée
empiler[nrow(empiler), "identifiant"] <- "Moyenne"
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# On va empiler la somme des notes en dessous de la base des notes
varNotes <- c("note_contenu", "note_formateur", "note_moyens", "note_accompagnement", "note_materiel")
# Moyenne des notes
moyennes <- donnees_tidyverse %>% 
  summarise(across(varNotes, ~mean(., na.rm = TRUE)))
empiler <- donnees_tidyverse %>% 
  select(all_of(varNotes)) %>% 
  bind_rows(moyennes)

# Fonctionne toujours si l'on concatène des bases de taille différente
empiler <- donnees_tidyverse %>% 
  select(identifiant, all_of(varNotes)) %>% 
  bind_rows(moyennes)
empiler <- empiler %>% 
  # On renomme la ligne des moyennes ajoutée
  mutate(identifiant = ifelse(row_number() == nrow(empiler),
                              "Moyenne",
                              identifiant))
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# On va empiler la somme des notes en dessous de la base des notes
varNotes <- c("note_contenu", "note_formateur", "note_moyens", "note_accompagnement", "note_materiel")
# Moyenne des notes
moyennes <- data.table(donnees_datatable[, lapply(.SD, mean, na.rm = TRUE), .SDcols = varNotes])

# On crée la base des notes
notes <- donnees_datatable[, mget(c("identifiant", varNotes))]

# Empilement proprement dit
empiler <- rbindlist(list(notes, moyennes), fill = TRUE)
# On renomme la ligne des moyennes ajoutée
set(empiler, i = nrow(empiler), j = "identifiant", value = "Moyenne")
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Ajouter une ligne de valeurs manquantes à une base de données

::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
data Ajout;run;
data Ajout_Missing;set Jointure Ajout;run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
ajout_na <- donnees_rbase
ajout_na[nrow(ajout_na) + 1, ] <- NA
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
ajout_na <- donnees_tidyverse %>%
  bind_rows(tibble(NA))
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
ajout_na <- rbindlist(list(donnees_datatable, data.table(NA)), fill = TRUE)
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::
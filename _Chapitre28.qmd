# Taille et suppression de bases

## Taille des objets en mémoire 
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
/* Taille d'une base de données */
proc sql;
  select libname, memname, filesize format = sizekmg., filesize format = sizek.
  from Dictionary.Tables
  where libname = "WORK" and memname = upcase("donnees_sas") and memtype = "DATA";
quit;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Taille, en mémoire, d'une base (en Mb)
format(object.size(donnees_rbase), nsmall = 3, digits = 2, unit = "Mb")

# Taille des objets en mémoire, en Gb
sort( sapply(ls(), function(x) object.size(get(x)) ), decreasing = TRUE ) / 10**9
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Taille, en mémoire, d'une base (en Mb)
donnees_tidyverse %>% 
  object.size() %>% 
  format(nsmall = 3, digits = 2, unit = "Mb")

# Taille des objets en mémoire, en Gb
sort( sapply(ls(), function(x) object.size(get(x)) ), decreasing = TRUE ) / 10**9
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Liste des bases de données en mémoire
data.table::tables() 

# Taille, en mémoire, d'une base (en Mb)
format(object.size(donnees_datatable), nsmall = 3, digits = 2, unit = "Mb")

# Taille des objets en mémoire, en Gb
sort( sapply(ls(), function(x) object.size(get(x)) ), decreasing = TRUE ) / 10**9
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```


:::

## Supprimer des bases
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
/* Supprimer une base */
proc datasets lib = work nolist;delete donnees_sas;run;

/* Supprimer plusieurs bases */
data donnees_sas2;set donnees_sas;run;
%let aSupprimer = donnees_sas donnees_sas2;
proc datasets lib = work nolist;delete &aSupprimer.;run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Supprimer une base
#rm(donnees_rbase)

# Supprimer plusieurs bases
# Ne pas oublier list = !
aSupprimer <- c("donnees_rbase", "donnees_tidyverse", "donnees_datatable")
#rm(list = aSupprimer)
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Supprimer une base
#rm(donnees_tidyverse)

# Supprimer plusieurs bases
# Ne pas oublier list = !
aSupprimer <- c("donnees_rbase", "donnees_tidyverse", "donnees_datatable")
#rm(list = aSupprimer)
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Supprimer une base
#rm(donnees_datatable)

# Supprimer plusieurs bases
# Ne pas oublier list = !
aSupprimer <- c("donnees_rbase", "donnees_tidyverse", "donnees_datatable")
#rm(list = aSupprimer)
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Supprimer toutes les bases
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
/* Supprimer toutes les bases dans la work */
proc datasets lib = work nolist kill;run;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Supprimer toutes les bases et tous les objets de la mémoire vive
#rm(list = ls())

# Supprimer les seules bases de la mémoire vive
# On isole les bases de données
#basesASupprimer <- ls(all = TRUE)[lapply(lapply(mget(ls(all = TRUE)), class), `[`, 1) %in% c("data.frame", "tbl_df", "data.table")]
# Suppression de ces bases
# Ne pas oublier list = !
#rm(list = basesASupprimer)
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Supprimer toutes les bases et tous les objets de la mémoire vive
#rm(list = ls())

# Supprimer les seules bases de la mémoire vive
# On isole les bases de données
#basesASupprimer <- ls(all = TRUE)[lapply(lapply(mget(ls(all = TRUE)), class), `[`, 1) %in% c("data.frame", "tbl_df", "data.table")]
# Suppression de ces bases
# Ne pas oublier list = !
#rm(list = basesASupprimer)
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Supprimer toutes les bases et tous les objets de la mémoire vive
#rm(list = ls())

# Supprimer les seules bases de la mémoire vive
# On isole les bases de données
#basesASupprimer <- ls(all = TRUE)[lapply(lapply(mget(ls(all = TRUE)), class), `[`, 1) %in% c("data.frame", "tbl_df", "data.table")]
# Suppression de ces bases
# Ne pas oublier list = !
#rm(list = basesASupprimer)
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::
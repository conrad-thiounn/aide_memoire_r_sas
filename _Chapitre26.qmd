# Débogage, temps d'exécution

## Outils d'aide au débogage 
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
options symbolgen mprint mlogic;
%macro Debogage;
  %local phrase i j;
  %let phrase = Voici une phrase;
  %do i = 1 %to %sysfunc(countw(&phrase.));
    %let j = %scan(&phrase., &i.);
	%put Mot n°&i. = &j.;
  %end;
%mend Debogage;
%Debogage;
options nosymbolgen nomprint nomlogic;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
#phrase <- c("voici", "une", "phrase")
#options(error=recover)
#for (i in phrase) print(k)
#options(error=NULL)

# À FAIRE : autres outils
#traceback()
#browser()
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# À FAIRE : creuser
#phrase <- c("voici", "une", "phrase")
#options(error=recover)
#for (i in phrase) print(k)
#options(error=NULL)

# À FAIRE : autres outils
#traceback()
#browser()
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
#phrase <- c("voici", "une", "phrase")
#options(error=recover)
#for (i in phrase) print(k)
#options(error=NULL)

# À FAIRE : autres outils
#traceback()
#browser()
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::

## Mesure du temps d'exécution d'un programme 
::: {.panel-tabset group="language"}

## SAS {.unnumbered .unlisted}
``` sas
/* Temps d'exécution */
%let temps_debut = %sysfunc(datetime());

/* Attendre 1 seconde */
data _null_;
 call sleep(1, 1);
run;

/* Affichage du temps de traitement (en minutes) */
%let temps_fin = %sysfunc(datetime());
%let duree = %sysevalf( (&temps_fin - &temps_debut) / 60 );
%put Durée exécution : &duree minutes;
```

## R base {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Temps d'exécution
tempsDebut <- Sys.time()

# Attendre 1 seconde
Sys.sleep(1)

# Affichage du temps de traitement (en minutes)
tempsFin <- Sys.time()
sprintf("Durée d'exécution : %s minutes", difftime(tempsFin, tempsDebut, units = "mins"))

# Autre solution (attente de 1 centième de seconde)
system.time(Sys.sleep(0.01))
```

## tidyverse {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Temps d'exécution
tempsDebut <- Sys.time()

# Attendre 1 seconde
Sys.sleep(1)

# Affichage du temps de traitement (en minutes)
tempsFin <- Sys.time()
sprintf("Durée d'exécution : %s minutes", difftime(tempsFin, tempsDebut, units = "mins"))

# Autre solution (attente de 1 centième de seconde)
system.time(Sys.sleep(0.01))
```

## data.table {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Temps d'exécution
tempsDebut <- Sys.time()

# Attendre 1 seconde
Sys.sleep(1)

# Affichage du temps de traitement (en minutes)
tempsFin <- Sys.time()
sprintf("Durée d'exécution : %s minutes", difftime(tempsFin, tempsDebut, units = "mins"))

# Autre solution (attente de 1 centième de seconde)
system.time(Sys.sleep(0.01))
```

## arrow/duckdb {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::
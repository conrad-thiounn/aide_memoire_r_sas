# Fin du programme

## Taille des objets en mémoire 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
/* Taille d'une base de données */
proc sql;
  select libname, memname, filesize format = sizekmg., filesize format = sizek.
  from Dictionary.Tables
  where libname = "WORK" and memname = upcase("donnees_sas") and memtype = "DATA";
quit;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Taille, en mémoire, d'une base (en Mb)
format(object.size(donnees_rbase), nsmall = 3, digits = 2, unit = "Mb")

# Taille des objets en mémoire, en Gb
sort(sapply(ls(), function(x){object.size(get(x))}), decreasing = TRUE)/10**9
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Taille, en mémoire, d'une base (en Mb)
donnees_tidyverse %>% 
  object.size() %>% 
  format(nsmall = 3, digits = 2, unit = "Mb")

# Taille des objets en mémoire, en Gb
sort(sapply(ls(), function(x){object.size(get(x))}), decreasing = TRUE)/10**9
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Liste des bases de données en mémoire
data.table::tables() 

# Taille, en mémoire, d'une base (en Mb)
format(object.size(donnees_datatable), nsmall = 3, digits = 2, unit = "Mb")

# Taille des objets en mémoire, en Gb
sort(sapply(ls(), function(x){object.size(get(x))}), decreasing = TRUE)/10**9
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```


:::

## Supprimer des bases
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
/* Supprimer une base */
proc datasets lib = work nolist;delete donnees_sas;run;

/* Supprimer toutes les bases dans la work */
proc datasets lib = work nolist kill;run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Supprimer une base
#rm(donnees_rbase)

# Supprimer toutes les bases et tous les objets de la mémoire vive
#rm(list = ls())
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Supprimer une base
#rm(donnees_tidyverse)

# Supprimer toutes les bases et tous les objets de la mémoire vive
#rm(list = ls())
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Supprimer une base
#rm(donnees_datatable)

# Supprimer toutes les bases et tous les objets de la mémoire vive
#rm(list = ls())
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```

:::
# Sélectionner des lignes et des colonnes 


## Selection de colonnes par position 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
%let pos = 1;
proc contents data = donnees_sas out = Var noprint;run;
proc sql noprint;
  select name into :nom_col separated by " "
  from Var
  where varnum = &pos.;
run;
data Colonnes;set donnees_sas (keep = &nom_col.);run;
proc datasets lib = Work nolist;delete Var;run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
pos <- 1
# Résultat sous forme de vecteur caractère
id <- donnees_rbase[[pos]] ; class(id)
id <- donnees_rbase[, pos] ; class(id)
# Résultat sous forme de data.frame
id <- donnees_rbase[pos] ; class(id)
id <- donnees_rbase[, pos, drop = FALSE] ; class(id)
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Sous forme de vecteur
id <- donnees_tidyverse %>% pull(1)
class(id)
pos <- 1
id <- donnees_tidyverse %>% pull(all_of(pos))
class(id)
# Sous forme de tibble
id <- donnees_tidyverse %>% select(1)
class(id)
pos <- 1
id <- donnees_tidyverse %>% select(all_of(pos))
class(id)
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
pos <- 1
# Résultat sous forme de vecteur caractère
id <- donnees_datatable[[pos]] ; class(id)
# Résultat sous forme de data.table
id <- donnees_datatable[pos] ; class(id)
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Selection de colonnes par nom 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
data Colonnes;set donnees_sas (keep = identifiant);run;
data Colonnes;set donnees_sas;keep identifiant;run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Résultat sous forme de vecteur caractère
id <- donnees_rbase$identifiant ; class(id)
id <- donnees_rbase[["identifiant"]] ; class(id)
id <- donnees_rbase[, "identifiant"] ; class(id)
# Résultat sous forme de data.frame
class(donnees_rbase[, "identifiant"])
# Attention, utilisation du drop = FALSE étrange
# En fait, l'affectation par [] a pour option par défaut drop = TRUE. Ce qui implique que si l'affectation renvoie
# un data.frame d'1 seule colonne, l'objet sera transformé en objet plus simple (vecteur en l'occurrence)
class(donnees_rbase[, "identifiant", drop = FALSE])
id <- donnees_rbase["identifiant"] ; class(id)
id <- donnees_rbase[, "identifiant", drop = FALSE] ; class(id)
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Sous forme de vecteur
id <- donnees_tidyverse %>% pull(identifiant)
id <- donnees_tidyverse %>% pull("identifiant")
# Sous forme de tibble
id <- donnees_tidyverse %>% select(identifiant)
id <- donnees_tidyverse %>% select("identifiant")
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Résultat sous forme de vecteur caractère
id <- donnees_datatable$identifiant ; class(id)
id <- donnees_datatable[["identifiant"]] ; class(id)
id <- donnees_datatable[, identifiant] ; class(id)
# Résultat sous forme de data.table
id <- donnees_datatable[, "identifiant"] ; class(id)
id <- donnees_datatable[, .("identifiant")] ; class(id)
id <- donnees_datatable[, list("identifiant")] ; class(id)
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Selection de colonnes par variable 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
%let var = identifiant Sexe note_contenu;
data Colonnes;
  /* Sélection de colonnes */
  set donnees_sas (keep = &var.);
  /* Selection de colonnes */
  keep &var.;
run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
variable <- "identifiant"
# Résultat sous forme de vecteur caractère
id <- donnees_rbase[, variable] ; class(id)
id <- donnees_rbase[[variable]] ; class(id)
# Résultat sous forme de data.frame
id <- donnees_rbase[variable] ; class(id)
id <- donnees_rbase[, variable, drop = FALSE] ; class(id)
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
variable <- "identifiant"
# Sous forme de vecteur
id <- donnees_tidyverse %>% pull(all_of(variable))
# Sous forme de tibble
id <- donnees_tidyverse %>% select(all_of(variable))
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Résultat sous forme de vecteur caractère
variable <- "identifiant"
id <- donnees_datatable[[variable]] ; class(id)
# Résultat sous forme de data.table
id <- donnees_datatable[, .(variable)] ; class(id)
id <- donnees_datatable[, list(variable)] ; class(id)
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sauf certaines variables 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
%let var = identifiant Sexe note_contenu;
data Colonnes;set donnees_sas (drop = &var.);run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
variable <- c("identifiant", "sexe", "note_contenu")
# Ne fonctionne pas !
#exclusion_var <- donnees_rbase[, -c(variable)]
exclusion_var <- donnees_rbase[, setdiff(names(donnees_rbase), variable)]
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
variable <- c("identifiant", "sexe", "note_contenu")
exclusion_var <- donnees_tidyverse %>% select(!all_of(variable))
exclusion_var <- donnees_tidyverse %>% select(-all_of(variable))
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
variable <- c("identifiant", "sexe", "note_contenu")
exclusion_var <- donnees_datatable[, !..variable]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sélectionner la 3e colonne 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
proc contents data = donnees_sas out = Var noprint;run;
proc sql noprint;
  select name into :nom_col separated by " "
  from Var
  where varnum = 3;
run;
data Col3;set donnees_sas (keep = &nom_col.);run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
col3 <- donnees_rbase[, 3]
col3 <- donnees_rbase[3]
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
col3 <- donnees_tidyverse %>% pull(3)
col3 <- donnees_tidyverse %>% select(3)
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
col3 <- donnees_datatable[, 3]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sélectionner plusieurs colonnes 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
%let var = identifiant note_contenu sexe;
data Colonnes;set donnees_sas (keep = &var.);run;
proc sql;
  create table Colonnes as
  select %sysfunc(tranwrd(&var., %str( ), %str(, )))
  from donnees_sas;
quit;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
cols <- c("identifiant", "note_contenu", "sexe")
colonnes <- donnees_rbase[, cols]
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
cols <- c("identifiant", "note_contenu", "sexe")
# Plusieurs possibilités
colonnes <- donnees_tidyverse %>% select(all_of(cols))
colonnes <- donnees_tidyverse %>% select(any_of(cols))
colonnes <- donnees_tidyverse %>% select({{cols}})
colonnes <- donnees_tidyverse %>% select(!!cols)
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
cols <- c("identifiant", "note_contenu", "sexe")
# Plusieurs écritures possibles
# Peut-être l'écriture la plus simple, à privilégier
colonnes <- donnees_datatable[, mget(cols)]
# Ecriture cohérente avec la logique data.table
colonnes <- donnees_datatable[, .SD, .SDcols = cols]
# Ecriture un peu contre-intuitve. Attention ! L'écriture est bien ..cols, et non ..(cols) !!
# Les syntaxes donnees_datatable[, ..(cols)] et donnees_datatable[, .(cols)] ne fonctionnent pas
colonnes <- donnees_datatable[, ..cols]
# Ecriture avec with = FALSE : désactive la possibilité de se référer à des colonnes sans les guillemets
# Avec with = FALSE : désactive la possibilité de se référer à des colonnes sans les guillemets
colonnes <- donnees_datatable[, cols, with = FALSE]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sélectionner les colonnes qui débutent par le mot Note 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
/* 1ère solution */
data Selection_Variables;set donnees_sas (keep = Note:);run;
/* 2e solution */
proc contents data = donnees_sas out = Var noprint;run;
proc sql;
  select name into :var_notes separated by " "
  from Var where substr(upcase(name), 1, 4) = "NOTE" order by varnum;
run;
proc datasets lib = Work nolist;delete Var;run;
data donnees_sas_Notes;set donnees_sas (keep = &var_notes.);run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
varNotes <- donnees_rbase[grepl("^note", names(donnees_rbase))]
varNotes <- donnees_rbase[substr(tolower(names(donnees_rbase)), 1, 4) == "note"]
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
varNotes <- donnees_tidyverse %>% select(starts_with("note"))
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# 1ère méthode
cols <- names(donnees_datatable)[substr(names(donnees_datatable), 1, 4) == "note"]
sel <- donnees_datatable[, .SD, .SDcols = cols]
# 2e méthode
sel <- donnees_datatable[, .SD, .SDcols = patterns("^note")]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sélectionner les colonnes qui ne débutent pas par le mot Note 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
data Selection_Variables;set donnees_sas (drop = Note:);run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
varNotes <- donnees_rbase[! grepl("^note", names(donnees_rbase))]
varNotes <- donnees_rbase[substr(tolower(names(donnees_rbase)), 1, 4) != "note"]
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
varNotes <- donnees_tidyverse %>% select(-starts_with("note"))
varNotes <- donnees_tidyverse %>% select(!starts_with("note"))
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
cols <- names(donnees_datatable)[substr(names(donnees_datatable), 1, 4) == "note"]
sel <- donnees_datatable[, .SD, .SDcols = -cols]
sel <- donnees_datatable[, .SD, .SDcols = -patterns("^note")]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sélectionner l'ensemble des variables numériques de la base 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
data Colonnes;set donnees_sas (keep = _numeric_);run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
varNumeriques <- donnees_rbase[, sapply(donnees_rbase, is.numeric), drop = FALSE]
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
varNumeriques <- donnees_tidyverse %>% select_if(is.numeric)
varNumeriques <- donnees_tidyverse %>% select(where(is.numeric))
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
sel <- donnees_datatable[, .SD, .SDcols = is.numeric]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sélectionner l'ensemble des variables de format "Date" 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
proc contents data = donnees_sas out = Var noprint;run;
proc sql noprint;
  select name into :nom_col separated by " "
  from Var where format not in ("$", "");
run;
data Colonnes;set donnees_sas (keep = &nom_col.);run;
proc datasets lib = Work nolist;delete Var;run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
varDates <- donnees_rbase[, sapply(donnees_rbase, is.Date), drop = FALSE]
varDates <- Filter(is.Date, donnees_rbase)
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
varDates <- donnees_tidyverse %>% select_if(is.Date)
varDates <- donnees_tidyverse %>% select(where(is.Date))
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
var_dates <- donnees_datatable[, .SD, .SDcols = is.Date]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sélectionner des lignes 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
/* 3e ligne */
data Ligne3;set donnees_sas (firstobs = 3 obs = 3);run;

/* Sélection des 3 premières lignes et des 3 premières colonnes de la base */
proc contents data = donnees_sas out = Var noprint;run;
proc sql noprint;
  select name into :nom_col separated by " " from Var
  where 1 <= varnum <= 3;
run;
data Top3;
  set donnees_sas (firstobs = 1 obs = 3 keep = &nom_col.);
run;
proc datasets lib = Work nolist;delete Var;run;

/* Sélection de lignes */
/* Entrées en 2023 */
data En2023;
  set donnees_sas (where = (year(date_entree) = 2023));
run;
data Avant2023_femme;
  set donnees_sas (where = (year(date_entree) < 2023 and sexe = 2));
run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Sélection des 3 premières lignes et des 3 premières colonnes de la base
top3 <- donnees_rbase[1:3, 1:3]

# 3e ligne
ligne3 <- donnees_rbase[3, ]

# Sélection de lignes
# Entrées en 2023
# ATTENTION, solution qui ne fonctionne pas toujours bien ! En effet, les valeurs manquantes sont sélectionnées !
en2023 <- donnees_rbase[lubridate::year(donnees_rbase$date_entree) == 2023, ]
# Bonnes écritures, qui excluent les valeurs manquantes
en2023 <- donnees_rbase[lubridate::year(donnees_rbase$date_entree) %in% c(2023), ]
en2023 <- donnees_rbase[which(lubridate::year(donnees_rbase$date_entree) == 2023), ]
en2023 <- subset(donnees_rbase, lubridate::year(donnees_rbase$date_entree) == 2023)
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
# Sélection des 3 premières lignes et des 3 premières colonnes de la base
top3 <- donnees_tidyverse %>% slice(1:3) %>% select(1:3)

# 3e ligne
ligne3 <- donnees_tidyverse %>% slice(3)

# Sélection de lignes
# Entrées en 2023
en2023 <- donnees_tidyverse %>% filter(lubridate::year(date_entree) == 2023)
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
top3 <- donnees_datatable[1:3, 1:3]

# 3e ligne
ligne3 <- donnees_datatable[3, ]
ligne3 <- donnees_datatable[3]

# Sélection de lignes
# Entrées en 2023
# Pas de problème avec les valeurs manquantes comme pour la syntaxe en R-Base
en2023 <- donnees_datatable[lubridate::year(date_entree) == 2023, ]
en2023 <- donnees_datatable[lubridate::year(date_entree) == 2023]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sélection sur de multiples conditions 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
/* Ecriture incorrecte. Les valeurs manquantes sont considérées comme des nombres négatifs faibles, et inférieurs à 2023. */
/* Ils sont sélectionnés dans le code suivant : */
data Avant2023_Femme;
  set donnees_sas (where = (year(date_entree) < 2023 and sexe = 2));
run;
/* Ecriture correcte */
data Avant2023_Femme;
  set donnees_sas (where = (year(date_entree) < 2023 and not missing(date_entree) and sexe = 2));
run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
avant2023_femme <- subset(donnees_rbase, lubridate::year(date_entree) < 2023 & sexe == "2")
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
avant2023_femme <- donnees_tidyverse %>% 
  filter(lubridate::year(date_entree) < 2023 & sexe == "2")
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
avant2023_femme <- donnees_datatable[lubridate::year(date_entree) < 2023 & sexe == "2"]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sélection de ligne par référence : lignes de l'identifiant 087 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
%let var = identifiant;
%let sel = 087;
data Selection;
  set donnees_sas;
  if &var. in ("&sel.");
run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
variable <- "identifiant"
sel <- "087"
donnees_rbase[donnees_rbase[, variable] %in% sel, ]
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
donnees_tidyverse %>% filter(identifiant %in% c("087")) %>% select(identifiant)
donnees_tidyverse %>% filter(identifiant == "087") %>% select(identifiant)
# Essayons désormais par variables
variable <- "identifiant"
sel <- "087"
# À FAIRE : peut-on faire plus simplement ?
donnees_tidyverse %>% filter(get(variable) %in% sel) %>% select(all_of(variable))
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
variable <- "identifiant"
sel <- "087"
donnees_datatable[donnees_datatable[[variable]] %chin% sel, ]
donnees_datatable[donnees_datatable[[variable]] %chin% sel, ]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}

```
:::
## Sélection de lignes et de variables 
::: {.panel-tabset group="language"}

## `SAS` {.unnumbered .unlisted}
``` sas
%let cols = identifiant note_contenu sexe;
data Femmes;
  set donnees_sas (where = (Sexe = 2) keep = &cols.);
run;
data Femmes;
  set donnees_sas;
  if Sexe = 2;
  keep &cols.;
run;

/* Par nom ou par variable */
%let var = identifiant Sexe note_contenu;
data Femmes;
  /* Sélection de colonnes */
  set donnees_sas (keep = &var.);
  /* Sélection de lignes respectant une certaine condition */
  if Sexe = "2";
  /* Création de colonne */
  note2 = note_contenu / 20 * 5;
  /* Suppression de colonnes */
  drop Sexe;
  /* Selection de colonnes */
  keep identifiant Sexe note_contenu;
run;
```

## `R base` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
cols <- c("identifiant", "note_contenu", "sexe", "date_naissance")
femmes <- donnees_rbase[donnees_rbase$sexe %in% c("2"), cols]
```

## `tidyverse` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
cols <- c("identifiant", "note_contenu", "sexe", "date_naissance")
femmes <- donnees_tidyverse %>% filter(sexe == "2") %>% select(all_of(cols))
femmes <- donnees_tidyverse %>% filter(sexe == "2") %>% select({{cols}})
```

## `data.table` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE, results='hide'}
cols <- c("identifiant", "note_contenu", "sexe", "date_naissance")
femmes <- donnees_datatable[sexe == "2", ..cols]
```

## `arrow/duckdb` {.unnumbered .unlisted}
```{r, warning=FALSE, message=FALSE}
# À FAIRE : compléter
#requete_duckdb %>% filter(sexe == "2")
```
:::